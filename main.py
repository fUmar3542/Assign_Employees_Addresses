import pandas as pd
from googlemaps import Client
import time
import numpy as np
import os

# API key (REPLACE with your own API key)
api_key = "AIzaSyCNVmTF4f5lgJSkhUDJY4q4PeDIl-d6mkY"
count_down = 0


# Define function for geocoding
def geocode_address(address):
  lat = lng = None
  try:
    global count_down
    count_down = count_down + 1
    client = Client(key=api_key)
    geocode_result = client.geocode(address)
    if geocode_result:
      location = geocode_result[0]["geometry"]["location"]
      lat = location["lat"]
      lng = location["lng"]
  except Exception as ex:
    print(ex)
  finally:
    return lat, lng


# Define function for distance calculation
def calculate_distance(lat1, lng1, lat2, lng2):
    try:
        global count_down
        count_down = count_down + 1
        client = Client(key=api_key)
        directions_result = client.directions(origin=(lat1, lng1), destination=(lat2, lng2), mode="driving")
        if directions_result:
            distance = directions_result[0]["legs"][0]["distance"]["value"]
        else:
            distance = None  # or any default value you prefer
    except Exception as ex:
        print(ex)
        distance = None  # or any default value you prefer
    finally:
        return distance


# Function generates an output csv file
def write_output(assignments):
  try:
    # Prepare data for new CSV file
    data = []
    for employee_name, assigned_addresses in assignments.items():
      for address in assigned_addresses:
        data.append({
          "Employee Name": employee_name,
          "Address": address["Address"],
          "City": address["City"],
          "State": address["State"],
          "Zip": address["Zip"],
          "Distance": address['distance']
        })
    # Create a new pandas DataFrame and write it to a CSV file
    df = pd.DataFrame(data)
    file_path = "Assignments.csv"
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
        except:
            pass
    df.to_csv(file_path, index=False)
  except Exception as ex:
    print(ex)
  finally:
    return


def write_distances(assignments, commercial_df):
    try:
        # Prepare data for new CSV file
        data = []
        names = ["Commercial Addresse"]
        for x, y in assignments.items():
            names.append(x)
        data.append(names)

        names = names[1:]

        for index, row in commercial_df.iterrows():
            try:
                d = [row['Address'] + ' ' + row['City'] + ' ' + row['State']]
                for nm in names:
                    d.append(assignments[nm][index][0])
                data.append(d)
            except:
                pass

        # Create a new pandas DataFrame and write it to a CSV file
        df = pd.DataFrame(data)
        file_path = "commercial_distances_from_employees.csv"
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
            except:
                pass
        df.to_csv(file_path, index=False, header=False)
    except Exception as ex:
        print(ex)
    finally:
        return


def read_file(excel_file):
    try:
        addresses_per_employee = 0
        commercial_df = employee_df = ""
        xls = pd.ExcelFile(excel_file)

        commercial_df = pd.read_excel(xls, 'Commercial')
        employee_df = pd.read_excel(xls, 'Employee')

        # Remove duplicate rows from commercial_df
        commercial_df = commercial_df.drop_duplicates()

        # Remove duplicate rows from employee_df
        employee_df = employee_df.drop_duplicates()

        # Reset the indexes if needed
        commercial_df = commercial_df.reset_index(drop=True)
        employee_df = employee_df.reset_index(drop=True)

        # Specify the number of addresses to assign per employee
        addresses_per_employee = int(commercial_df.shape[0] / employee_df.shape[0])

    except Exception as ex:
        print(ex)
    finally:
        return commercial_df, employee_df, addresses_per_employee


def find_smallest_distance(distances):
    smallest_distance = float('inf')
    smallest_index = None
    try:
        for distance, index in distances:
            if distance < smallest_distance and distance != -1:
                smallest_distance = distance
                smallest_index = index
    except Exception as ex:
        print(ex)
    finally:
        return smallest_distance, smallest_index


def find_name(tuple, dictionary):
    name = None
    try:
        for x, y in dictionary.items():
            if tuple in y:
                name = x
                break
    except Exception as ex:
        print(ex)
    finally:
        return name


def assign_employees_addresses(distance_matrix):
    assigned_addresses = {}
    index_to_employee = {}
    try:
        # Flatten and sort distances by distance
        all_distances = [(employee, distance, index) for employee, distances in distance_matrix.items() for distance, index in distances]
        all_distances.sort(key=lambda x: x[1])

        for employee, distance, index in all_distances:
            if index not in index_to_employee:
                assigned_addresses.setdefault(employee, []).append((distance, index))
                index_to_employee[index] = employee

        # Sort each list within the dictionary by the first value in each tuple
        assigned_addresses = {key: sorted(value, key=lambda x: x[0]) for key, value in assigned_addresses.items()}
    except Exception as ex:
        print(ex)
    finally:
        return assigned_addresses


def get_unassigned(assigned_addresses, unassigned_addresses, num_addresses_per_employee):
    emps = []
    try:
        for x, y in assigned_addresses.items():
            if len(y) > num_addresses_per_employee:
                for i in range(num_addresses_per_employee, len(y)):
                    unassigned_addresses.append(y[i])
                assigned_addresses[x] = y[:num_addresses_per_employee]
                emps.append(x)
    except Exception as ex:
        print(ex)
    finally:
        return unassigned_addresses, emps


def assign_unassigned_addresses(unassigned_addresses, assigned_addresses, num_addresses_per_employee, distance_matrix, exclude):
    try:
        ass = []
        for address in unassigned_addresses:
            index = address[1]
            smallest = []
            try:
                for x, y in distance_matrix.items():
                    if x not in exclude and (len(assigned_addresses[x]) < num_addresses_per_employee):
                        smallest.append(y[index])
                d, i = find_smallest_distance(smallest)
                for x, y in distance_matrix.items():
                    if (d, i) in y:
                        assigned_addresses[x] = assigned_addresses[x] + [(d, i)]
                        ass.append(i)
                        break
            except:
                pass

        unassigned_addresses = [item for item in unassigned_addresses if item[1] not in ass]       # remove assigned
    except Exception as ex:
        print(ex)
    finally:
        return assigned_addresses, unassigned_addresses


def assign_addresses(distance_matrix, num_addresses_per_employee):
    try:
        assigned_addresses = assign_employees_addresses(distance_matrix)
        unassigned_addresses = []
        while True:
            unassigned_addresses, emps = get_unassigned(assigned_addresses, unassigned_addresses, num_addresses_per_employee)
            if len(unassigned_addresses) < num_addresses_per_employee:
                last_key = list(assigned_addresses.keys())[-1]
                assigned_addresses[last_key] = assigned_addresses[last_key] + unassigned_addresses
                break
            else:
                assigned_addresses, unassigned_addresses = assign_unassigned_addresses(unassigned_addresses, assigned_addresses, num_addresses_per_employee, distance_matrix, emps)
                assigned_addresses = {key: sorted(value, key=lambda x: x[0]) for key, value in assigned_addresses.items()}
    except Exception as ex:
        print(ex)
    finally:
        return assigned_addresses


# Main driver function
def main(input_file):
    try:
        commercial_df, employee_df, addresses_per_employee = read_file(input_file)

        if addresses_per_employee > 0:
            # Create an empty dictionary to store assignments
            assignments = {}
            try:
                nm = ""
                for employee_index, employee_row in employee_df.iterrows():
                    employee_address = f"{employee_row['Address']}, {employee_row['City']}, {employee_row['State']}, {employee_row['Zip']}"
                    assignments[employee_row["Name"]] = []

                    # Geocode employee address
                    employee_lat, employee_lng = geocode_address(employee_address)
                    if employee_lat is None or employee_lng is None:
                        continue
                    distances = []
                    print("**************************************************************************")
                    print("Calculating distance of " + employee_row['Name'] + " from commercial addresses")
                    print("**************************************************************************")
                    # Calculate distances for each commercial address
                    for commercial_index, commercial_row in commercial_df.iterrows():
                        if count_down % 10 == 0:
                            time.sleep(1)
                        commercial_address = f"{commercial_row['Address']}, {commercial_row['City']}, {commercial_row['State']}, {commercial_row['Zip']}"

                        # Geocode commercial address
                        commercial_lat, commercial_lng = geocode_address(commercial_address)
                        if commercial_lat is None or commercial_lng is None:
                            continue

                        try:
                            # Calculate distance and store in a tuple
                            distance = calculate_distance(employee_lat, employee_lng, commercial_lat, commercial_lng)
                            if not distance:
                                continue
                            distance_tuple = (distance, commercial_index)
                            # Add distance tuple to a list for sorting
                            distances = assignments[employee_row["Name"]]
                            distances.append(distance_tuple)
                        except:
                            pass

                # assignments = {'Jeff Cart': [(1694627, 0), (1562311, 1), (2270497, 2), (2295916, 3), (1705491, 4), (1774701, 5), (3925174, 6), (3628528, 7), (671935, 8), (2045469, 9), (1772131, 10), (3924382, 11), (4440869, 12), (4301336, 13), (4860252, 14), (1498265, 15), (186239, 16), (1825056, 17), (1194773, 18), (3941730, 19), (1206565, 20), (188224, 21), (1850945, 22), (1593575, 23), (713128, 24), (1679624, 25), (4862555, 26), (1771075, 27), (1813401, 28), (1392067, 29), (3036649, 30), (1827957, 31), (440676, 32), (608183, 33), (1901459, 34), (1903271, 35), (2147298, 36), (337369, 37), (4110310, 38), (3374324, 39), (1771326, 40), (1942987, 41), (657430, 42), (1700771, 43), (1849934, 44), (1788414, 45), (1773011, 46), (3175803, 47), (1720596, 48), (1591770, 49), (1716281, 50), (1193996, 51), (348926, 52), (1773633, 53), (1917048, 54), (4110383, 55), (1773558, 56), (82833, 57), (3564845, 58), (1395092, 59), (4118568, 60), (4815187, 61), (1720602, 62), (1830022, 63), (399226, 64), (1443371, 65), (1561861, 66), (1393329, 67), (3170294, 68), (506822, 69), (1595029, 70), (1558641, 71), (1420568, 72), (924911, 73), (4859958, 74), (1907224, 75), (1561666, 76), (6478647, 77), (3774920, 78), (3831641, 79), (3829802, 80), (3835170, 81), (3970500, 82), (1193695, 83), (1194708, 84), (1196428, 85), (1195124, 86), (504516, 87), (201848, 88), (505101, 89), (511485, 90), (501684, 91), (662934, 92), (642380, 93), (1793295, 97), (1771168, 98), (1730272, 99), (1844727, 100), (1506438, 101), (1407724, 102), (1755024, 103), (1222505, 104), (1027670, 105), (1898859, 106), (1249304, 107), (1254892, 108), (1290599, 109), (2043278, 110), (1709890, 111), (2439028, 112), (2402436, 113), (1528976, 114), (1535059, 115), (685073, 116), (794862, 117), (1594310, 118), (1566063, 119), (1467459, 120), (1619185, 121), (1561685, 122), (1698825, 123), (1357955, 124), (1585967, 125), (1511791, 126), (1418458, 127), (1347732, 128), (527410, 129), (528110, 130), (667680, 131), (1226132, 132), (1692642, 133), (1694026, 134), (1694575, 135), (3574770, 136), (2009098, 137), (4721276, 138), (4862042, 139), (4863017, 140), (4871788, 141), (4863391, 142), (1562461, 143), (2811452, 144), (923249, 145), (1235853, 146), (7531549, 147), (1315324, 148), (3927926, 149), (3973320, 150), (3874063, 151), (3947152, 152), (4376858, 153), (4256630, 154), (2849484, 155), (1196564, 156), (512237, 157), (88853, 158), (506682, 159), (645202, 160), (521016, 161), (187505, 162), (611996, 163), (632564, 164), (1968041, 165), (4363288, 166), (3737985, 167), (1797721, 168), (1489021, 169), (1804943, 170), (1805173, 171), (1908836, 172), (1267157, 173), (1499815, 174), (1467729, 175), (1897349, 176), (1897783, 177), (1960786, 178), (1244572, 179), (1294589, 180), (1215501, 181), (1212356, 182), (2318517, 183), (1597776, 184), (1836921, 185), (2104498, 186), (2781260, 187), (2419517, 188), (2419517, 189), (1473652, 190), (1796326, 191), (4283773, 192), (749264, 193), (706221, 194), (2079625, 195), (1964702, 196), (1497968, 197), (1409965, 198), (1457555, 199), (1536496, 200), (1569060, 201), (1571323, 202), (1570317, 203), (1565952, 204), (1492527, 205), (2685462, 206), (3950895, 207), (1783754, 208), (1845406, 209), (1752726, 210), (1719852, 211), (1753850, 212), (1557672, 213), (1561499, 214), (1843340, 215), (2076050, 216), (1380276, 217), (1380276, 218), (4999477, 219), (4479710, 220), (4833830, 221), (1508215, 222), (1381229, 223), (1403875, 224), (1394963, 225), (1421188, 226), (1418408, 227), (1465356, 228), (442010, 229), (540023, 230), (875211, 231), (989804, 232), (920702, 233), (1697994, 234), (1724904, 235), (1795679, 236), (1841795, 237), (1494533, 238), (1729402, 239), (3628707, 240), (1195869, 241), (863187, 242), (1030176, 243), (1965825, 244), (505274, 245), (3624399, 246), (1387967, 247), (4399993, 248), (2115187, 249), (3835707, 250), (1590456, 251), (4893917, 252), (906461, 253), (657340, 254), (1207089, 255), (2005098, 256), (1911405, 257), (1670272, 258), (6478647, 259), (740877, 260), (1548345, 261), (3356522, 262), (3054287, 263), (3959717, 264), (3972969, 265), (3828921, 266), (3828037, 267), (3823249, 268), (4438038, 269), (2872962, 270), (2873597, 271), (2969640, 272)], 'John Smith': [(1887367, 0), (1755051, 1), (2463237, 2), (2488656, 3), (1871285, 4), (1940495, 5), (4091057, 6), (3794412, 7), (864675, 8), (2238209, 9), (1937925, 10), (4090265, 11), (4606753, 12), (4467130, 13), (5026046, 14), (1691005, 15), (78555, 16), (1990940, 17), (1387513, 18), (4107613, 19), (1399305, 20), (82346, 21), (2016739, 22), (1786315, 23), (878922, 24), (1845508, 25), (5028349, 26), (1936869, 27), (1979195, 28), (1584807, 29), (3202533, 30), (1993751, 31), (259958, 32), (773977, 33), (2094199, 34), (2096011, 35), (2340038, 36), (530109, 37), (4276193, 38), (3540207, 39), (1937120, 40), (2108781, 41), (823314, 42), (1893511, 43), (2042674, 44), (1954208, 45), (1938894, 46), (3341686, 47), (1913336, 48), (1784510, 49), (1882075, 50), (1386736, 51), (247049, 52), (1939427, 53), (2082842, 54), (4276177, 55), (1939352, 56), (268627, 57), (3730729, 58), (1587832, 59), (4284362, 60), (4980981, 61), (1913342, 62), (1995816, 63), (218507, 64), (1636111, 65), (1754601, 66), (1586069, 67), (3336177, 68), (326103, 69), (1787769, 70), (1751381, 71), (1613308, 72), (1090705, 73), (5025752, 74), (2073018, 75), (1754406, 76), (6644441, 77), (3940803, 78), (3997524, 79), (3995685, 80), (4001053, 81), (4136383, 82), (1386435, 83), (1387448, 84), (1389168, 85), (1387864, 86), (323797, 87), (99972, 88), (324382, 89), (330766, 90), (320965, 91), (828728, 92), (808174, 93), (1959089, 97), (1936962, 98), (1896066, 99), (2010521, 100), (1672232, 101), (1573518, 102), (1920818, 103), (1388299, 104), (1193553, 105), (2091599, 106), (1442044, 107), (1447632, 108), (1483339, 109), (2236018, 110), (1902630, 111), (2604822, 112), (2568230, 113), (1694770, 114), (1700853, 115), (877813, 116), (987602, 117), (1787050, 118), (1758803, 119), (1660199, 120), (1811925, 121), (1754425, 122), (1891565, 123), (1523749, 124), (1778707, 125), (1704531, 126), (1611198, 127), (1540472, 128), (720150, 129), (720850, 130), (860420, 131), (1391926, 132), (1858525, 133), (1859910, 134), (1860459, 135), (3740654, 136), (2201838, 137), (4887070, 138), (5027836, 139), (5028811, 140), (5037582, 141), (5029185, 142), (1755201, 143), (2977246, 144), (1115989, 145), (1401647, 146), (7697343, 147), (1481208, 148), (4093809, 149), (4139203, 150), (4039946, 151), (4113035, 152), (4542742, 153), (4422513, 154), (3015368, 155), (1389304, 156), (331518, 157), (108312, 158), (325963, 159), (811085, 160), (340297, 161), (82340, 162), (814482, 163), (798358, 164), (2133835, 165), (4529082, 166), (3903779, 167), (1963515, 168), (1654815, 169), (1970737, 170), (1970967, 171), (2074630, 172), (1432951, 173), (1665609, 174), (1633523, 175), (2090089, 176), (2090523, 177), (2153526, 178), (1437312, 179), (1487329, 180), (1408241, 181), (1405096, 182), (2511257, 183), (1790516, 184), (2002715, 185), (2297238, 186), (2947054, 187), (2585311, 188), (2585311, 189), (1639446, 190), (1962120, 191), (4449567, 192), (942004, 193), (898961, 194), (2272365, 195), (2157442, 196), (1690708, 197), (1602705, 198), (1650295, 199), (1729236, 200), (1761800, 201), (1764063, 202), (1763057, 203), (1758692, 204), (1685267, 205), (2851346, 206), (4116689, 207), (1976494, 208), (2038146, 209), (1945466, 210), (1912592, 211), (1946590, 212), (1750412, 213), (1754239, 214), (2036080, 215), (2268790, 216), (1546070, 217), (1546070, 218), (5165271, 219), (4645504, 220), (4999624, 221), (1700955, 222), (1573969, 223), (1596615, 224), (1587703, 225), (1613928, 226), (1611148, 227), (1658096, 228), (634750, 229), (732763, 230), (1067951, 231), (1155598, 232), (1086496, 233), (1863878, 234), (1890787, 235), (1961562, 236), (2007678, 237), (1660416, 238), (1895285, 239), (3794501, 240), (1388609, 241), (1055927, 242), (1222916, 243), (2158565, 244), (324555, 245), (3790283, 246), (1580707, 247), (4565877, 248), (2307927, 249), (4001590, 250), (1756250, 251), (5059711, 252), (1099201, 253), (823134, 254), (1399829, 255), (2197838, 256), (2077199, 257), (1836156, 258), (6644441, 259), (906671, 260), (1714139, 261), (3522405, 262), (3220171, 263), (4125600, 264), (4138852, 265), (3994804, 266), (3993920, 267), (3989132, 268), (4603922, 269), (3038756, 270), (3039391, 271), (3135434, 272)], 'Bob Parker': [(609152, 0), (516767, 1), (1030970, 2), (1056389, 3), (1463199, 4), (947083, 5), (4152905, 6), (3734877, 7), (1141897, 8), (680536, 9), (944513, 10), (4142808, 11), (4341920, 12), (3702710, 13), (4261626, 14), (623872, 15), (1934757, 16), (2143953, 17), (564971, 18), (4140950, 19), (543774, 20), (1936742, 21), (1013098, 22), (479300, 23), (1481548, 24), (2299273, 25), (4263929, 26), (943457, 27), (985092, 28), (432695, 29), (3342799, 30), (773427, 31), (2189194, 32), (1564868, 33), (661932, 34), (556125, 35), (907771, 36), (1517879, 37), (4309530, 38), (3600136, 39), (943708, 40), (1285147, 41), (1672611, 42), (527840, 43), (645077, 44), (966306, 45), (2715986, 46), (3616580, 47), (182590, 48), (484267, 49), (683184, 50), (556207, 51), (2052609, 52), (946015, 53), (1674756, 54), (3639510, 55), (945940, 56), (1737598, 57), (3391416, 58), (449414, 59), (3519942, 60), (4344313, 61), (182596, 62), (812561, 63), (2147743, 64), (427212, 65), (516317, 66), (530315, 67), (3611071, 68), (2255339, 69), (477160, 70), (512817, 71), (523419, 72), (1251248, 73), (4261332, 74), (1664932, 75), (516122, 76), (5638774, 77), (4043114, 78), (4196547, 79), (4194708, 80), (4200077, 81), (4169720, 82), (561292, 83), (562530, 84), (559994, 85), (558994, 86), (2253033, 87), (1950366, 88), (2253618, 89), (2260002, 90), (2250201, 91), (1482507, 92), (1516472, 93), (965677, 97), (943550, 98), (1399070, 99), (1006880, 100), (902887, 101), (918211, 102), (856460, 103), (921418, 104), (2161448, 105), (659332, 106), (548714, 107), (496580, 108), (469894, 109), (803751, 110), (531838, 111), (1599155, 112), (1612121, 113), (1291366, 114), (1302637, 115), (1136548, 116), (996521, 117), (478144, 118), (480277, 119), (545960, 120), (564501, 121), (516141, 122), (653203, 123), (782313, 124), (577526, 125), (414151, 126), (525366, 127), (415219, 128), (1278229, 129), (1273605, 130), (1231564, 131), (1537731, 132), (2629797, 133), (2318169, 134), (2318718, 135), (3459183, 136), (562311, 137), (4122650, 138), (4263416, 139), (4264391, 140), (4273162, 141), (4264765, 142), (516917, 143), (1971579, 144), (1235032, 145), (921863, 146), (6691676, 147), (1972405, 148), (4169503, 149), (4185595, 150), (4209331, 151), (4146372, 152), (4386968, 153), (4403942, 154), (2756561, 155), (558645, 156), (2260754, 157), (1837371, 158), (2255199, 159), (1940327, 160), (2269533, 161), (1936023, 162), (1434450, 163), (1520995, 164), (1315445, 165), (3764662, 166), (3267111, 167), (970103, 168), (1266012, 169), (982835, 170), (983065, 171), (1068963, 172), (1119178, 173), (892153, 174), (769302, 175), (657822, 176), (658256, 177), (751911, 178), (543980, 179), (593999, 180), (537512, 181), (555539, 182), (911906, 183), (580159, 184), (799762, 185), (899641, 186), (1941387, 187), (1615344, 188), (1615344, 189), (1331435, 190), (1554034, 191), (3532968, 192), (1041096, 193), (1227867, 194), (703361, 195), (588438, 196), (674188, 197), (556821, 198), (583162, 199), (542557, 200), (475315, 201), (471152, 202), (470896, 203), (507270, 204), (668747, 205), (2940199, 206), (3545416, 207), (43079, 208), (351730, 209), (393351, 210), (181846, 211), (708229, 212), (511848, 213), (515955, 214), (221216, 215), (527107, 216), (762624, 217), (762624, 218), (4528604, 219), (4008837, 220), (4362957, 221), (425567, 222), (436185, 223), (387593, 224), (424857, 225), (524613, 226), (525274, 227), (359127, 228), (1408258, 229), (1262414, 230), (1230842, 231), (1246913, 232), (1232613, 233), (2328769, 234), (2601777, 235), (2802825, 236), (2705328, 237), (2501059, 238), (2651663, 239), (3157834, 240), (565013, 241), (915560, 242), (722449, 243), (519038, 244), (2253791, 245), (3735469, 246), (518810, 247), (4387769, 248), (910330, 249), (4217565, 250), (1358515, 251), (4295291, 252), (1214359, 253), (1508736, 254), (543398, 255), (765571, 256), (1073558, 257), (2292224, 258), (5638774, 259), (1542007, 260), (1859071, 261), (3623944, 262), (3360437, 263), (4169197, 264), (4187027, 265), (4193827, 266), (4192944, 267), (4188156, 268), (4339089, 269), (2529502, 270), (2530137, 271), (2569330, 272)], 'Sam Gray': [(4643824, 0), (4513818, 1), (5191002, 2), (5023898, 3), (2824991, 4), (3267759, 5), (59192, 6), (447716, 7), (3906550, 8), (4840568, 9), (3265128, 10), (45494, 11), (611175, 12), (2174030, 13), (1823375, 14), (4480211, 15), (4057005, 16), (2294039, 17), (4280317, 18), (55668, 19), (4246596, 20), (4060796, 21), (3303193, 22), (4512868, 23), (3470092, 24), (2307971, 25), (1825682, 26), (3262083, 27), (3255374, 28), (3922984, 29), (901498, 30), (3462867, 31), (4352438, 32), (3530381, 33), (4821964, 34), (4716157, 35), (5067803, 36), (3853754, 37), (150198, 38), (653390, 39), (3264323, 40), (2909478, 41), (3370936, 42), (4598839, 43), (3706235, 44), (3235774, 45), (2195720, 46), (804820, 47), (4322872, 48), (4517835, 49), (3507140, 50), (4299664, 51), (4129930, 52), (3266630, 53), (2630550, 54), (1354066, 55), (3266610, 56), (3912349, 57), (867461, 58), (3946313, 59), (1848179, 60), (1107910, 61), (4322878, 62), (3464932, 63), (4310987, 64), (3829793, 65), (4513368, 66), (4386478, 67), (798727, 68), (4415268, 69), (4508876, 70), (4509869, 71), (4379758, 72), (3357213, 73), (1823165, 74), (2622581, 75), (4513173, 76), (4405562, 77), (197111, 78), (225235, 79), (223396, 80), (196860, 81), (13895, 82), (4314248, 83), (4314025, 84), (4321564, 85), (4312247, 86), (4422253, 87), (4064669, 88), (4413547, 89), (4429222, 90), (4419421, 91), (3559539, 92), (3537765, 93), (3258696, 97), (3264165, 98), (2981840, 99), (3296975, 100), (3361651, 101), (3408846, 102), (3330759, 103), (3505052, 104), (2940915, 105), (4819364, 106), (4306918, 107), (4199397, 108), (4286518, 109), (4963783, 110), (3703305, 111), (3121640, 112), (2981962, 113), (2962482, 114), (2947168, 115), (3910770, 116), (3987611, 117), (4513603, 118), (4477328, 119), (4412749, 120), (4561552, 121), (4513192, 122), (4650254, 123), (3517547, 124), (3611772, 125), (3769699, 126), (4381705, 127), (4251550, 128), (3854932, 129), (3881563, 130), (4120123, 131), (2928005, 132), (2265841, 133), (2290897, 134), (2291446, 135), (723114, 136), (4722343, 137), (1813025, 138), (1838378, 139), (1826204, 140), (1834974, 141), (1826578, 142), (4513968, 143), (2878222, 144), (3571085, 145), (3491823, 146), (5458464, 147), (2679342, 148), (93416, 149), (19989, 150), (165064, 151), (49516, 152), (547164, 153), (296518, 154), (1570419, 155), (4316507, 156), (4420682, 157), (4049253, 158), (4424419, 159), (3358118, 160), (4438753, 161), (4060790, 162), (3636419, 163), (3534337, 164), (2911756, 165), (1982282, 166), (1389970, 167), (3259017, 168), (2977974, 169), (3244877, 170), (3219943, 171), (3188149, 172), (3235462, 173), (3373251, 174), (3466502, 175), (4817854, 176), (4818288, 177), (4911943, 178), (4302184, 179), (4352203, 180), (4240334, 181), (4282019, 182), (4939618, 183), (3642284, 184), (3473297, 185), (3902491, 186), (3088045, 187), (2998059, 188), (2998059, 189), (2935155, 190), (2753469, 191), (2184242, 192), (3983423, 193), (3772767, 194), (4863393, 195), (4748470, 196), (4530527, 197), (4413160, 198), (4439501, 199), (4493224, 200), (4472366, 201), (4468203, 202), (4467947, 203), (4504321, 204), (4525086, 205), (1383513, 206), (842149, 207), (4153418, 208), (4511763, 209), (4553384, 210), (4322128, 211), (4705280, 212), (4508900, 213), (4513006, 214), (4381248, 215), (4646519, 216), (3521566, 217), (3521566, 218), (1373042, 219), (1636753, 220), (1373315, 221), (4357520, 222), (3912146, 223), (4242075, 224), (4307972, 225), (4380952, 226), (4381613, 227), (3948192, 228), (4008555, 229), (3870426, 230), (3609260, 231), (3273856, 232), (3516612, 233), (2294059, 234), (2232914, 235), (2406578, 236), (2108890, 237), (2472660, 238), (2246831, 239), (1186491, 240), (4281413, 241), (4015108, 242), (4225159, 243), (4679070, 244), (4413720, 245), (448841, 246), (3835318, 247), (570299, 248), (3913180, 249), (207460, 250), (2898765, 251), (1867232, 252), (3582600, 253), (3553946, 254), (4246220, 255), (4925603, 256), (3274395, 257), (2315961, 258), (4405562, 259), (3298531, 260), (2651114, 261), (625054, 262), (905403, 263), (67395, 264), (19823, 265), (212509, 266), (215917, 267), (211829, 268), (608344, 269), (1655545, 270), (1656352, 271), (1726705, 272)], 'Joe Swanson': [(1779144, 0), (1649138, 1), (2326322, 2), (2159218, 3), (400774, 4), (403079, 5), (2880731, 6), (2462703, 7), (1571691, 8), (1975888, 9), (400448, 10), (2870634, 11), (3069746, 12), (2399358, 13), (2958274, 14), (1695488, 15), (2054860, 16), (1154385, 17), (1495904, 18), (2868776, 19), (1475998, 20), (2058651, 21), (438513, 22), (1648188, 23), (1294464, 24), (1282062, 25), (2960577, 26), (397403, 27), (390694, 28), (1117247, 29), (2161744, 30), (598187, 31), (2350293, 32), (1390161, 33), (1957284, 34), (1851477, 35), (2203123, 36), (1683298, 37), (3037356, 38), (2419081, 39), (399643, 40), (31347, 41), (1405575, 42), (1734159, 43), (841555, 44), (371094, 45), (1792939, 46), (2435525, 47), (1458192, 48), (1653155, 49), (642460, 50), (1488431, 51), (2127785, 52), (401950, 53), (509913, 54), (2367336, 55), (401930, 56), (1910308, 57), (2119242, 58), (1132225, 59), (2216590, 60), (3072139, 61), (1458198, 62), (600252, 63), (2308842, 64), (965113, 65), (1648688, 66), (1601755, 67), (2430016, 68), (2413123, 69), (1644196, 70), (1645189, 71), (1595035, 72), (1072758, 73), (2957980, 74), (493499, 75), (1648493, 76), (4498951, 77), (2883631, 78), (2995850, 79), (2994011, 80), (2980895, 81), (2897546, 82), (1493516, 83), (1494754, 84), (1508176, 85), (1491218, 86), (2420108, 87), (2062524, 88), (2411402, 89), (2427077, 90), (2417276, 91), (1363538, 92), (1341765, 93), (394016, 97), (399485, 98), (249838, 99), (432295, 100), (611958, 101), (696177, 102), (466079, 103), (936474, 104), (1501452, 105), (1954684, 106), (1536320, 107), (1428799, 108), (1521502, 109), (2099103, 110), (838625, 111), (461298, 112), (451581, 113), (436824, 114), (439035, 115), (1555233, 116), (1507109, 117), (1648923, 118), (1612648, 119), (1628026, 120), (1696872, 121), (1648512, 122), (1785574, 123), (804877, 124), (747092, 125), (905019, 126), (1596982, 127), (1466827, 128), (1609336, 129), (1638769, 130), (1877329, 131), (913610, 132), (1706750, 133), (1366296, 134), (1366845, 135), (2187009, 136), (1857663, 137), (2819298, 138), (2960064, 139), (2961039, 140), (2969810, 141), (2961413, 142), (1649288, 143), (831756, 144), (1250088, 145), (923245, 146), (5551853, 147), (1188183, 148), (2897329, 149), (2913421, 150), (2937157, 151), (2874198, 152), (3114794, 153), (3131768, 154), (1484387, 155), (1490869, 156), (2418537, 157), (2047212, 158), (2422274, 159), (1575095, 160), (2436608, 161), (2058645, 162), (1443626, 163), (1346288, 164), (6280, 165), (2461310, 166), (1994937, 167), (394337, 168), (479472, 169), (380197, 170), (355263, 171), (323469, 172), (736960, 173), (623558, 174), (744206, 175), (1953174, 176), (1953608, 177), (2047263, 178), (1531586, 179), (1581605, 180), (1469736, 181), (1511421, 182), (2074938, 183), (777604, 184), (608617, 185), (912919, 186), (801564, 187), (468662, 188), (468662, 189), (489596, 190), (512326, 191), (2381795, 192), (1539366, 193), (1437908, 194), (1998713, 195), (1883790, 196), (1745804, 197), (1628437, 198), (1654778, 199), (1674929, 200), (1607686, 201), (1603523, 202), (1603267, 203), (1639641, 204), (1740363, 205), (1707630, 206), (2273242, 207), (1288738, 208), (1647083, 209), (1688704, 210), (1457448, 211), (1840600, 212), (1644220, 213), (1648326, 214), (1516568, 215), (1781839, 216), (808896, 217), (808896, 218), (3256430, 219), (2736663, 220), (3090783, 221), (1544057, 222), (1119260, 223), (1457352, 224), (1523249, 225), (1596229, 226), (1596890, 227), (1083512, 228), (1794779, 229), (1627633, 230), (1274401, 231), (979877, 232), (1221452, 233), (1392087, 234), (1678730, 235), (2004475, 236), (1740112, 237), (1704575, 238), (1728616, 239), (1885660, 240), (1495946, 241), (1516508, 242), (1624666, 243), (1814390, 244), (2411575, 245), (2463295, 246), (1113022, 247), (3115595, 248), (964627, 249), (2945391, 250), (432732, 251), (2991939, 252), (1247741, 253), (1334029, 254), (1475622, 255), (2060923, 256), (347028, 257), (1287824, 258), (4498951, 259), (1274971, 260), (1074849, 261), (2442889, 262), (2179382, 263), (2897023, 264), (2914853, 265), (2989087, 266), (2988149, 267), (2983370, 268), (3066915, 269), (1257328, 270), (1257963, 271), (1297156, 272)]}
                write_distances(assignments, commercial_df)

                tuples = assign_addresses(assignments, addresses_per_employee)
                for x, y in tuples.items():
                    print(x)
                    assignments[x] = []
                    for z in y:
                        row_index = z[1]
                        distance_value = z[0]
                        commercial_df.loc[row_index, 'distance'] = distance_value
                        assignments[x].append(commercial_df.iloc[z[1]])
                        # print(commercial_df.iloc[row_index])
                        # print(distance_value)
            except Exception as ex:
                print(ex)
            finally:
                if assignments:
                  write_output(assignments)
                else:
                  print("No addresses assigned!!!")
    except Exception as ex:
        print(ex)


# Calling main driver function
if __name__ == '__main__':
  input_file = "Addresses.xlsx"
  main(input_file)
